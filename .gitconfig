[core]
	excludefile = /Users/smohamed/gitignore_global
	excludesfile = /Users/smohamed/.gitignore_global
[push]
	default = simple

[alias]
	; deleting fully merged branches apart from master and dev
	cleanshit = "!git remote prune origin && git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"

	status-changedonly = !"for m in $(git status | grep modified| awk '{print $2}');do test -z \"$(git diff -w $m)\" || echo $m;done"

	; cleans all local and remote tracking branches that are not in remote (will not delete not fully merged branches)
	; syncbranches = "!git fetch --prune && git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d"

	; setting the upstream branch to the local branch (solves the problem of "There's no tracking information for this branch")
	setupstream = !git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`set-upstream = !git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`

	;update origin refs (if you changed your default branch remotely)
	sethead = !git remote set-head origin -a
	
	
	;graph commands
	gr = log --graph --full-history --all --color \
		        --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"

	lg = !"git lg1"
        lg1 = !"git lg1-specific --all"
        lg2 = !"git lg2-specific --all"
        lg3 = !"git lg3-specific --all"

        lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'
        lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
        lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'


    pr  = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"

[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[user]
	name = Sherif Mohamed
	email = sherif.mohamed@zalando.de
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
; [merge]
; 	conflictstyle = diff3
[diff]
	tool = mvimdiff

[difftool "mvimdiff"]
    cmd = mvim -f -d \"$LOCAL\" \"$REMOTE\"

[difftool]
	prompt = false

[remote "origin"]
	fetch = +refs/pull/*/merge:refs/pull-requests/origin/*
